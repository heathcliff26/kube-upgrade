// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	v1alpha2 "github.com/heathcliff26/kube-upgrade/pkg/apis/kubeupgrade/v1alpha2"
	kubeupgradev1alpha2 "github.com/heathcliff26/kube-upgrade/pkg/client/applyconfiguration/kubeupgrade/v1alpha2"
	typedkubeupgradev1alpha2 "github.com/heathcliff26/kube-upgrade/pkg/client/clientset/versioned/typed/kubeupgrade/v1alpha2"
	gentype "k8s.io/client-go/gentype"
)

// fakeKubeUpgradePlans implements KubeUpgradePlanInterface
type fakeKubeUpgradePlans struct {
	*gentype.FakeClientWithListAndApply[*v1alpha2.KubeUpgradePlan, *v1alpha2.KubeUpgradePlanList, *kubeupgradev1alpha2.KubeUpgradePlanApplyConfiguration]
	Fake *FakeKubeupgradeV1alpha2
}

func newFakeKubeUpgradePlans(fake *FakeKubeupgradeV1alpha2, namespace string) typedkubeupgradev1alpha2.KubeUpgradePlanInterface {
	return &fakeKubeUpgradePlans{
		gentype.NewFakeClientWithListAndApply[*v1alpha2.KubeUpgradePlan, *v1alpha2.KubeUpgradePlanList, *kubeupgradev1alpha2.KubeUpgradePlanApplyConfiguration](
			fake.Fake,
			namespace,
			v1alpha2.SchemeGroupVersion.WithResource("kubeupgradeplans"),
			v1alpha2.SchemeGroupVersion.WithKind("KubeUpgradePlan"),
			func() *v1alpha2.KubeUpgradePlan { return &v1alpha2.KubeUpgradePlan{} },
			func() *v1alpha2.KubeUpgradePlanList { return &v1alpha2.KubeUpgradePlanList{} },
			func(dst, src *v1alpha2.KubeUpgradePlanList) { dst.ListMeta = src.ListMeta },
			func(list *v1alpha2.KubeUpgradePlanList) []*v1alpha2.KubeUpgradePlan {
				return gentype.ToPointerSlice(list.Items)
			},
			func(list *v1alpha2.KubeUpgradePlanList, items []*v1alpha2.KubeUpgradePlan) {
				list.Items = gentype.FromPointerSlice(items)
			},
		),
		fake,
	}
}
