// Code generated by applyconfiguration-gen. DO NOT EDIT.

package applyconfiguration

import (
	v1alpha1 "github.com/heathcliff26/kube-upgrade/pkg/apis/kubeupgrade/v1alpha1"
	v1alpha2 "github.com/heathcliff26/kube-upgrade/pkg/apis/kubeupgrade/v1alpha2"
	internal "github.com/heathcliff26/kube-upgrade/pkg/client/applyconfiguration/internal"
	kubeupgradev1alpha1 "github.com/heathcliff26/kube-upgrade/pkg/client/applyconfiguration/kubeupgrade/v1alpha1"
	kubeupgradev1alpha2 "github.com/heathcliff26/kube-upgrade/pkg/client/applyconfiguration/kubeupgrade/v1alpha2"
	runtime "k8s.io/apimachinery/pkg/runtime"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	testing "k8s.io/client-go/testing"
)

// ForKind returns an apply configuration type for the given GroupVersionKind, or nil if no
// apply configuration type exists for the given GroupVersionKind.
func ForKind(kind schema.GroupVersionKind) interface{} {
	switch kind {
	// Group=kubeupgrade.heathcliff.eu, Version=v1alpha1
	case v1alpha1.SchemeGroupVersion.WithKind("KubeUpgradePlan"):
		return &kubeupgradev1alpha1.KubeUpgradePlanApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("KubeUpgradePlanGroup"):
		return &kubeupgradev1alpha1.KubeUpgradePlanGroupApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("KubeUpgradeSpec"):
		return &kubeupgradev1alpha1.KubeUpgradeSpecApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("KubeUpgradeStatus"):
		return &kubeupgradev1alpha1.KubeUpgradeStatusApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("UpgradedConfig"):
		return &kubeupgradev1alpha1.UpgradedConfigApplyConfiguration{}

		// Group=kubeupgrade.heathcliff.eu, Version=v1alpha2
	case v1alpha2.SchemeGroupVersion.WithKind("KubeUpgradePlan"):
		return &kubeupgradev1alpha2.KubeUpgradePlanApplyConfiguration{}
	case v1alpha2.SchemeGroupVersion.WithKind("KubeUpgradePlanGroup"):
		return &kubeupgradev1alpha2.KubeUpgradePlanGroupApplyConfiguration{}
	case v1alpha2.SchemeGroupVersion.WithKind("KubeUpgradeSpec"):
		return &kubeupgradev1alpha2.KubeUpgradeSpecApplyConfiguration{}
	case v1alpha2.SchemeGroupVersion.WithKind("KubeUpgradeStatus"):
		return &kubeupgradev1alpha2.KubeUpgradeStatusApplyConfiguration{}
	case v1alpha2.SchemeGroupVersion.WithKind("UpgradedConfig"):
		return &kubeupgradev1alpha2.UpgradedConfigApplyConfiguration{}

	}
	return nil
}

func NewTypeConverter(scheme *runtime.Scheme) *testing.TypeConverter {
	return &testing.TypeConverter{Scheme: scheme, TypeResolver: internal.Parser()}
}
