// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

// KubeUpgradeSpecApplyConfiguration represents a declarative configuration of the KubeUpgradeSpec type for use
// with apply.
type KubeUpgradeSpecApplyConfiguration struct {
	KubernetesVersion *string                                           `json:"kubernetesVersion,omitempty"`
	Groups            map[string]KubeUpgradePlanGroupApplyConfiguration `json:"groups,omitempty"`
}

// KubeUpgradeSpecApplyConfiguration constructs a declarative configuration of the KubeUpgradeSpec type for use with
// apply.
func KubeUpgradeSpec() *KubeUpgradeSpecApplyConfiguration {
	return &KubeUpgradeSpecApplyConfiguration{}
}

// WithKubernetesVersion sets the KubernetesVersion field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the KubernetesVersion field is set to the value of the last call.
func (b *KubeUpgradeSpecApplyConfiguration) WithKubernetesVersion(value string) *KubeUpgradeSpecApplyConfiguration {
	b.KubernetesVersion = &value
	return b
}

// WithGroups puts the entries into the Groups field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the Groups field,
// overwriting an existing map entries in Groups field with the same key.
func (b *KubeUpgradeSpecApplyConfiguration) WithGroups(entries map[string]KubeUpgradePlanGroupApplyConfiguration) *KubeUpgradeSpecApplyConfiguration {
	if b.Groups == nil && len(entries) > 0 {
		b.Groups = make(map[string]KubeUpgradePlanGroupApplyConfiguration, len(entries))
	}
	for k, v := range entries {
		b.Groups[k] = v
	}
	return b
}
