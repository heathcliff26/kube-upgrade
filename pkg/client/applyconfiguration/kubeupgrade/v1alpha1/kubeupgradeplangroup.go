// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

// KubeUpgradePlanGroupApplyConfiguration represents a declarative configuration of the KubeUpgradePlanGroup type for use
// with apply.
type KubeUpgradePlanGroupApplyConfiguration struct {
	DependsOn []string          `json:"dependsOn,omitempty"`
	Labels    map[string]string `json:"labels,omitempty"`
}

// KubeUpgradePlanGroupApplyConfiguration constructs a declarative configuration of the KubeUpgradePlanGroup type for use with
// apply.
func KubeUpgradePlanGroup() *KubeUpgradePlanGroupApplyConfiguration {
	return &KubeUpgradePlanGroupApplyConfiguration{}
}

// WithDependsOn adds the given value to the DependsOn field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the DependsOn field.
func (b *KubeUpgradePlanGroupApplyConfiguration) WithDependsOn(values ...string) *KubeUpgradePlanGroupApplyConfiguration {
	for i := range values {
		b.DependsOn = append(b.DependsOn, values[i])
	}
	return b
}

// WithLabels puts the entries into the Labels field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the Labels field,
// overwriting an existing map entries in Labels field with the same key.
func (b *KubeUpgradePlanGroupApplyConfiguration) WithLabels(entries map[string]string) *KubeUpgradePlanGroupApplyConfiguration {
	if b.Labels == nil && len(entries) > 0 {
		b.Labels = make(map[string]string, len(entries))
	}
	for k, v := range entries {
		b.Labels[k] = v
	}
	return b
}
